"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
require("./MotifPanel.css");
var _GlobalContext = require("../contexts/GlobalContext");
var _SketchPanel = _interopRequireDefault(require("./SketchPanel"));
var _Search = _interopRequireDefault(require("@mui/icons-material/Search"));
var _PriorityHigh = _interopRequireDefault(require("@mui/icons-material/PriorityHigh"));
var _material = require("@mui/material");
var _lodash = _interopRequireDefault(require("lodash"));
var _InfoButton = _interopRequireDefault(require("./InfoButton"));
var _rendering = require("../utils/rendering");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function MotifPanel(props) {
  const {
    processRequest,
    attributes
  } = props;
  const [number, setNumber] = (0, _react.useState)(1);
  const [enableAbsMotifCountInfo, setEnableAbsMotifCountInfo] = (0, _react.useState)(false);
  const [countButtonColor, setCountButtonColor] = (0, _react.useState)("neutral");
  const [cypherLoading, setCypherLoading] = (0, _react.useState)(false);
  const motifPanelId = "motif-panel-div";
  const context = (0, _react.useContext)(_GlobalContext.AppContext);
  const displayMotifCount = typeof attributes.displayMotifCount != "undefined" ? attributes.displayMotifCount : false;
  const handleSubmit = () => {
    console.log("handle submit clicked");
    return fetchMotifs();
  };
  const fetchMotifs = async () => {
    console.log("Fetch Motifs");
    context.setErrorMessage(null);
    setCypherLoading(true);
    try {
      await processRequest(context.motifQuery, number);
    } catch (e) {
      console.log(e);
      context.setErrorMessage(e.message);
    } finally {
      setCypherLoading(false);
    }
  };
  const getMotifCountAsString = () => {
    if (context.absMotifCount) {
      return context.absMotifCount.toLocaleString();
    } else {
      return "N/A";
    }
  };
  const parseButtonTooltip = () => {
    let exp = "";
    if (countButtonColor === "neutral") {
      exp = "Expressed as in random network";
    } else if (countButtonColor === "weak") {
      exp = "Under expressed";
    } else if (countButtonColor === "strong") {
      exp = "Over expressed";
    } else if (countButtonColor === "stronger") {
      exp = "Strongly over expressed";
    } else if (countButtonColor === "weaker") {
      exp = "Strongly under expressed";
    }
    return `${exp} in hemibrain`;
  };
  (0, _react.useEffect)(() => {
    let relCount = context.relativeMotifCount;
    if (relCount >= 2.0) {
      setCountButtonColor("stronger");
    } else if (relCount > 0.5 && relCount < 2.0) {
      setCountButtonColor("strong");
    } else if (relCount >= -0.5 && relCount <= 0.5) {
      setCountButtonColor("neutral");
    } else if (relCount < -0.5 && relCount > -2.0) {
      setCountButtonColor("weak");
    } else if (relCount <= -2.0) {
      setCountButtonColor("weaker");
    } else {
      setCountButtonColor("neutral");
    }
  }, [context.relativeMotifCount]);

  // catch change in context absmotifcount
  (0, _react.useEffect)(() => {
    if (context.absMotifCount == null || context.absMotifCount <= 0) {
      setEnableAbsMotifCountInfo(false);
    } else {
      setEnableAbsMotifCountInfo(true);
    }
  }, [context.absMotifCount]);
  return /*#__PURE__*/_react.default.createElement("div", {
    id: motifPanelId
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "form"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "handle"
  }, displayMotifCount ? /*#__PURE__*/_react.default.createElement(_material.ThemeProvider, {
    theme: _rendering.Color.theme
  }, /*#__PURE__*/_react.default.createElement(_material.Tooltip, {
    title: parseButtonTooltip(),
    arrow: true,
    placement: "right"
  }, /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_InfoButton.default, {
    text: getMotifCountAsString(),
    disabled: !enableAbsMotifCountInfo,
    color: countButtonColor,
    icon: /*#__PURE__*/_react.default.createElement(_Search.default, null)
  })))) : null, context.showWarning ? /*#__PURE__*/_react.default.createElement(_InfoButton.default, {
    color: "error",
    icon: /*#__PURE__*/_react.default.createElement(_PriorityHigh.default, null)
  }) : null), /*#__PURE__*/_react.default.createElement("div", {
    id: "motif-panel-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_SketchPanel.default, props), /*#__PURE__*/_react.default.createElement("div", {
    className: "sketch-panel-options-style"
  }, /*#__PURE__*/_react.default.createElement(_material.FormControl, {
    sx: {
      m: 1,
      maxWidth: 80
    }
  }, /*#__PURE__*/_react.default.createElement(_material.TextField, {
    id: "outlined-number",
    label: "Number",
    type: "number",
    InputLabelProps: {
      shrink: true
    },
    size: "small",
    margin: "normal",
    style: {
      marginTop: 0,
      marginLeft: "8px"
    },
    defaultValue: 1,
    onChange: event => setNumber(_lodash.default.toNumber(event.target.value))
  })), /*#__PURE__*/_react.default.createElement(_material.FormControl, {
    sx: {
      m: 1,
      minWidth: 100
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Button, {
    size: "medium",
    variant: "contained",
    startIcon: /*#__PURE__*/_react.default.createElement(_Search.default, null),
    onClick: handleSubmit,
    disabled: cypherLoading || (typeof attributes != "undefined" && typeof attributes.isQuerying != "undefined" ? attributes.isQuerying : false)
  }, typeof attributes != "undefined" && typeof attributes.buttonText != "undefined" ? attributes.buttonText : "Search"))))));
}
var _default = exports.default = MotifPanel;