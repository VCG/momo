"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextWrapper = exports.AppContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _Colors = require("../config/Colors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const AppContext = exports.AppContext = /*#__PURE__*/_react.default.createContext(null);

// Step 2: Create a ContextWrapper component that has to be the parent of every consumer.

const ContextWrapper = props => {
  const {
    attributes
  } = props;
  const [motifQuery, setMotifQuery] = (0, _react.useState)();
  const [neuronColors, setNeuronColors] = (0, _react.useState)(typeof attributes != "undefined" && typeof attributes.nodeColors != "undefined" ? attributes.nodeColors : _Colors.NEURON_COLORS);
  const [errorMessage, setErrorMessage] = (0, _react.useState)();
  const [selectedSketchElement, setSelectedSketchElement] = (0, _react.useState)(null);

  // motif occurences stats
  const [absMotifCount, setAbsMotifCount] = (0, _react.useState)(null); // count of a motif in the dataset, e.g motif1 occurs 100 times in the dataset
  const [relativeMotifCount, setRelativeMotifCount] = (0, _react.useState)(null); // count of all motifs in the dataset. e.g, motif1 is Highly represented in the dataset
  // const [showWarning, setShowWarning] = useState(false);

  return /*#__PURE__*/_react.default.createElement(AppContext.Provider, {
    value: {
      selectedSketchElement,
      setSelectedSketchElement,
      motifQuery,
      setMotifQuery,
      neuronColors,
      setNeuronColors,
      absMotifCount,
      setAbsMotifCount,
      relativeMotifCount,
      setRelativeMotifCount,
      // showWarning,
      // setShowWarning,
      errorMessage,
      setErrorMessage
    }
  }, props.children);
};
exports.ContextWrapper = ContextWrapper;