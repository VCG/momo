"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextWrapper = exports.AppContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _Colors = require("../config/Colors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var AppContext = exports.AppContext = /*#__PURE__*/_react["default"].createContext(null);

// Step 2: Create a ContextWrapper component that has to be the parent of every consumer.

var ContextWrapper = exports.ContextWrapper = function ContextWrapper(props) {
  var attributes = props.attributes;
  var _useState = (0, _react.useState)(),
    _useState2 = _slicedToArray(_useState, 2),
    motifQuery = _useState2[0],
    setMotifQuery = _useState2[1];
  var _useState3 = (0, _react.useState)(typeof attributes != "undefined" && typeof attributes.nodeColors != "undefined" ? attributes.nodeColors : _Colors.NEURON_COLORS),
    _useState4 = _slicedToArray(_useState3, 2),
    neuronColors = _useState4[0],
    setNeuronColors = _useState4[1];
  var _useState5 = (0, _react.useState)(),
    _useState6 = _slicedToArray(_useState5, 2),
    errorMessage = _useState6[0],
    setErrorMessage = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = _slicedToArray(_useState7, 2),
    selectedSketchElement = _useState8[0],
    setSelectedSketchElement = _useState8[1];

  // motif occurences stats
  var _useState9 = (0, _react.useState)(null),
    _useState10 = _slicedToArray(_useState9, 2),
    absMotifCount = _useState10[0],
    setAbsMotifCount = _useState10[1]; // count of a motif in the dataset, e.g motif1 occurs 100 times in the dataset
  var _useState11 = (0, _react.useState)(null),
    _useState12 = _slicedToArray(_useState11, 2),
    relativeMotifCount = _useState12[0],
    setRelativeMotifCount = _useState12[1]; // count of all motifs in the dataset. e.g, motif1 is Highly represented in the dataset
  // const [showWarning, setShowWarning] = useState(false);

  return /*#__PURE__*/_react["default"].createElement(AppContext.Provider, {
    value: {
      selectedSketchElement: selectedSketchElement,
      setSelectedSketchElement: setSelectedSketchElement,
      motifQuery: motifQuery,
      setMotifQuery: setMotifQuery,
      neuronColors: neuronColors,
      setNeuronColors: setNeuronColors,
      absMotifCount: absMotifCount,
      setAbsMotifCount: setAbsMotifCount,
      relativeMotifCount: relativeMotifCount,
      setRelativeMotifCount: setRelativeMotifCount,
      // showWarning,
      // setShowWarning,
      errorMessage: errorMessage,
      setErrorMessage: setErrorMessage
    }
  }, props.children);
};