"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextWrapper = exports.AppContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _Colors = require("../config/Colors");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AppContext = /*#__PURE__*/_react.default.createContext();

// Step 2: Create a ContextWrapper component that has to be the parent of every consumer.
exports.AppContext = AppContext;
const ContextWrapper = props => {
  const {
    attributes
  } = props;
  const [motifQuery, setMotifQuery] = (0, _react.useState)();
  const [neuronColors, setNeuronColors] = (0, _react.useState)(typeof attributes != "undefined" && typeof attributes.nodeColors != "undefined" ? attributes.nodeColors : _Colors.NEURON_COLORS);
  const [errorMessage, setErrorMessage] = (0, _react.useState)();
  const [selectedSketchElement, setSelectedSketchElement] = (0, _react.useState)(null);

  // motif occurences stats
  const [absMotifCount, setAbsMotifCount] = (0, _react.useState)(null); // count of a motif in the dataset, e.g motif1 occurs 100 times in the dataset
  const [relativeMotifCount, setRelativeMotifCount] = (0, _react.useState)(null); // count of all motifs in the dataset. e.g, motif1 is Highly represented in the dataset
  const [showWarning, setShowWarning] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(AppContext.Provider, {
    value: {
      selectedSketchElement,
      setSelectedSketchElement,
      motifQuery,
      setMotifQuery,
      neuronColors,
      setNeuronColors,
      absMotifCount,
      setAbsMotifCount,
      relativeMotifCount,
      setRelativeMotifCount,
      showWarning,
      setShowWarning,
      errorMessage,
      setErrorMessage
    }
  }, props.children);
};
exports.ContextWrapper = ContextWrapper;