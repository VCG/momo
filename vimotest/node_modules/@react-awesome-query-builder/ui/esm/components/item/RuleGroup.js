import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _get from "@babel/runtime/helpers/get";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from "react";
import PropTypes from "prop-types";
import GroupContainer from "../containers/GroupContainer";
import Draggable from "../containers/Draggable";
import { BasicGroup } from "./Group";
import { RuleGroupActions } from "./RuleGroupActions";
import FieldWrapper from "../rule/FieldWrapper";
import { WithConfirmFn } from "../utils";
var RuleGroup = /*#__PURE__*/function (_BasicGroup) {
  function RuleGroup(props) {
    var _this;
    _classCallCheck(this, RuleGroup);
    _this = _callSuper(this, RuleGroup, [props]);
    _this.childrenClassName = function () {
      return "rule_group--children";
    };
    _this.renderHeaderWrapper = function () {
      return null;
    };
    _this.renderFooterWrapper = function () {
      return null;
    };
    _this.renderConjs = function () {
      return null;
    };
    _this.canAddGroup = function () {
      return false;
    };
    _this.canAddRule = function () {
      return true;
    };
    _this.canDeleteGroup = function () {
      return false;
    };
    return _this;
  }
  _inherits(RuleGroup, _BasicGroup);
  return _createClass(RuleGroup, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {
      _get(_getPrototypeOf(RuleGroup.prototype), "onPropsChanged", this).call(this, nextProps);
    }
  }, {
    key: "reordableNodesCntForItem",
    value: function reordableNodesCntForItem(_item) {
      if (this.props.isLocked) return 0;
      var children1 = this.props.children1;
      return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
    }
  }, {
    key: "renderChildrenWrapper",
    value: function renderChildrenWrapper() {
      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderDrag(), this.renderField(), this.renderActions(), _get(_getPrototypeOf(RuleGroup.prototype), "renderChildrenWrapper", this).call(this));
    }
  }, {
    key: "renderField",
    value: function renderField() {
      var _this$props = this.props,
        config = _this$props.config,
        selectedField = _this$props.selectedField,
        selectedFieldSrc = _this$props.selectedFieldSrc,
        selectedFieldType = _this$props.selectedFieldType,
        setField = _this$props.setField,
        setFuncValue = _this$props.setFuncValue,
        setFieldSrc = _this$props.setFieldSrc,
        parentField = _this$props.parentField,
        id = _this$props.id,
        groupId = _this$props.groupId,
        isLocked = _this$props.isLocked;
      var immutableFieldsMode = config.settings.immutableFieldsMode;
      return /*#__PURE__*/React.createElement(FieldWrapper, {
        key: "field",
        classname: "group--field",
        config: config,
        canSelectFieldSource: false,
        selectedField: selectedField,
        selectedFieldSrc: selectedFieldSrc,
        selectedFieldType: selectedFieldType,
        setField: setField,
        setFuncValue: setFuncValue,
        setFieldSrc: setFieldSrc,
        parentField: parentField,
        readonly: immutableFieldsMode || isLocked,
        id: id,
        groupId: groupId
      });
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      var _this$props2 = this.props,
        config = _this$props2.config,
        addRule = _this$props2.addRule,
        isLocked = _this$props2.isLocked,
        isTrueLocked = _this$props2.isTrueLocked,
        id = _this$props2.id;
      return /*#__PURE__*/React.createElement(RuleGroupActions, {
        config: config,
        addRule: addRule,
        canAddRule: this.canAddRule(),
        canDeleteGroup: this.canDeleteGroup(),
        removeSelf: this.removeSelf,
        setLock: this.setLock,
        isLocked: isLocked,
        isTrueLocked: isTrueLocked,
        id: id
      });
    }
  }, {
    key: "extraPropsForItem",
    value: function extraPropsForItem(_item) {
      return {
        parentField: this.props.selectedField
      };
    }
  }]);
}(BasicGroup);
RuleGroup.propTypes = _objectSpread(_objectSpread({}, BasicGroup.propTypes), {}, {
  selectedField: PropTypes.any,
  selectedFieldSrc: PropTypes.string,
  parentField: PropTypes.string,
  setField: PropTypes.func,
  setFieldSrc: PropTypes.func
});
export default GroupContainer(Draggable("group rule_group")(WithConfirmFn(RuleGroup)), "rule_group");