import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { PureComponent } from "react";
var groupActionsPositionList = {
  topLeft: "group--actions--tl",
  topCenter: "group--actions--tc",
  topRight: "group--actions--tr",
  bottomLeft: "group--actions--bl",
  bottomCenter: "group--actions--bc",
  bottomRight: "group--actions--br"
};
var defaultPosition = "topRight";
export var SwitchGroupActions = /*#__PURE__*/function (_PureComponent) {
  function SwitchGroupActions() {
    _classCallCheck(this, SwitchGroupActions);
    return _callSuper(this, SwitchGroupActions, arguments);
  }
  _inherits(SwitchGroupActions, _PureComponent);
  return _createClass(SwitchGroupActions, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        addCaseGroup = _this$props.addCaseGroup,
        addDefaultCaseGroup = _this$props.addDefaultCaseGroup,
        setLock = _this$props.setLock,
        isLocked = _this$props.isLocked,
        isTrueLocked = _this$props.isTrueLocked,
        id = _this$props.id,
        canAddGroup = _this$props.canAddGroup,
        canAddDefault = _this$props.canAddDefault;
      var _config$settings = config.settings,
        immutableGroupsMode = _config$settings.immutableGroupsMode,
        addCaseLabel = _config$settings.addCaseLabel,
        addDefaultCaseLabel = _config$settings.addDefaultCaseLabel,
        groupActionsPosition = _config$settings.groupActionsPosition,
        renderButton = _config$settings.renderButton,
        renderIcon = _config$settings.renderIcon,
        renderSwitch = _config$settings.renderSwitch,
        renderButtonGroup = _config$settings.renderButtonGroup,
        lockLabel = _config$settings.lockLabel,
        lockedLabel = _config$settings.lockedLabel,
        showLock = _config$settings.showLock;
      var Icon = function Icon(pr) {
        return renderIcon(pr, config.ctx);
      };
      var Btn = function Btn(pr) {
        return renderButton(pr, config.ctx);
      };
      var Switch = function Switch(pr) {
        return renderSwitch(pr, config.ctx);
      };
      var BtnGrp = function BtnGrp(pr) {
        return renderButtonGroup(pr, config.ctx);
      };
      var position = groupActionsPositionList[groupActionsPosition || defaultPosition];
      var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /*#__PURE__*/React.createElement(Switch, {
        type: "lock",
        id: id,
        value: isLocked,
        setValue: setLock,
        label: lockLabel,
        checkedLabel: lockedLabel,
        config: config
      });
      var addCaseGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /*#__PURE__*/React.createElement(Btn, {
        type: "addCaseGroup",
        onClick: addCaseGroup,
        label: addCaseLabel,
        readonly: isLocked,
        config: config,
        renderIcon: Icon
      });
      var addDefaultCaseGroupBtn = !immutableGroupsMode && canAddDefault && !isLocked && /*#__PURE__*/React.createElement(Btn, {
        type: "addDefaultCaseGroup",
        onClick: addDefaultCaseGroup,
        label: addDefaultCaseLabel,
        readonly: isLocked,
        config: config,
        renderIcon: Icon
      });
      return /*#__PURE__*/React.createElement("div", {
        className: "group--actions ".concat(position)
      }, /*#__PURE__*/React.createElement(BtnGrp, {
        config: config
      }, setLockSwitch, addCaseGroupBtn, addDefaultCaseGroupBtn));
    }
  }]);
}(PureComponent);