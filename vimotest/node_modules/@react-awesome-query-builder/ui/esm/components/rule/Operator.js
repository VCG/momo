import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { Component } from "react";
import { Utils } from "@react-awesome-query-builder/core";
import PropTypes from "prop-types";
import keys from "lodash/keys";
import pickBy from "lodash/pickBy";
import mapValues from "lodash/mapValues";
import { useOnPropsChanged, pureShouldComponentUpdate, liteShouldComponentUpdate } from "../../utils/reactUtils";
var _Utils$ConfigUtils = Utils.ConfigUtils,
  getFieldConfig = _Utils$ConfigUtils.getFieldConfig,
  getOperatorConfig = _Utils$ConfigUtils.getOperatorConfig;
var Operator = /*#__PURE__*/function (_Component) {
  function Operator(props) {
    var _this;
    _classCallCheck(this, Operator);
    _this = _callSuper(this, Operator, [props]);
    _this.shouldComponentUpdate = liteShouldComponentUpdate(_this, {
      // tip: rely on selectedFieldId instead
      selectedField: function selectedField(nextValue, prevValue) {
        return false;
      }
    });
    useOnPropsChanged(_this);
    _this.onPropsChanged(props);
    return _this;
  }
  _inherits(Operator, _Component);
  return _createClass(Operator, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {
      var prevProps = this.props;
      var keysForMeta = ["config", "selectedField", "selectedFieldSrc", "selectedFieldType", "selectedOperator"];
      var needUpdateMeta = !this.meta || keysForMeta.map(function (k) {
        return nextProps[k] !== prevProps[k];
      }).filter(function (ch) {
        return ch;
      }).length > 0;
      if (needUpdateMeta) {
        this.meta = this.getMeta(nextProps);
      }
    }
  }, {
    key: "getMeta",
    value: function getMeta(_ref) {
      var _config$types$selecte;
      var config = _ref.config,
        selectedField = _ref.selectedField,
        selectedFieldType = _ref.selectedFieldType,
        selectedOperator = _ref.selectedOperator;
      var fieldConfig = getFieldConfig(config, selectedField);
      var operators = _toConsumableArray((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators) || ((_config$types$selecte = config.types[selectedFieldType]) === null || _config$types$selecte === void 0 ? void 0 : _config$types$selecte.operators) || []);
      if (!selectedField && !operators.includes(selectedOperator)) {
        // eg. `prox` field was selected, then `fieldSrc` changed to `func`
        // But `text` type excludes `proximity` operator in config, so add manually
        operators.push(selectedOperator);
      }
      var operatorsOptions = mapValues(pickBy(config.operators, function (item, key) {
        return (operators === null || operators === void 0 ? void 0 : operators.indexOf(key)) !== -1;
      }), function (_opts, op) {
        return getOperatorConfig(config, op, selectedField);
      });
      var items = this.buildOptions(config, operatorsOptions, operators);
      var selectedOpts = operatorsOptions[selectedOperator] || {};
      var placeholder = this.props.config.settings.operatorPlaceholder;
      var selectedKey = selectedOperator;
      var selectedKeys = selectedKey ? [selectedKey] : null;
      var selectedPath = selectedKeys;
      var selectedLabel = selectedOpts.label;
      // tip: label2 is not documented for operators
      var selectedAltLabel = selectedOpts.label2 || selectedOpts.tooltip;
      return {
        placeholder: placeholder,
        items: items,
        selectedKey: selectedKey,
        selectedKeys: selectedKeys,
        selectedPath: selectedPath,
        selectedLabel: selectedLabel,
        selectedAltLabel: selectedAltLabel,
        selectedOpts: selectedOpts,
        fieldConfig: fieldConfig
      };
    }
  }, {
    key: "buildOptions",
    value: function buildOptions(config, fields, ops) {
      if (!fields || !ops) return null;
      return keys(fields).sort(function (a, b) {
        return ops.indexOf(a) - ops.indexOf(b);
      }).map(function (fieldKey) {
        var field = fields[fieldKey];
        var label = field.label;
        var altLabel = field.label2;
        var tooltip = field.tooltip;
        return {
          key: fieldKey,
          path: fieldKey,
          label: label,
          altLabel: altLabel,
          tooltip: tooltip
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        customProps = _this$props.customProps,
        setOperator = _this$props.setOperator,
        readonly = _this$props.readonly,
        id = _this$props.id,
        groupId = _this$props.groupId;
      var renderOperator = config.settings.renderOperator;
      var renderProps = _objectSpread({
        id: id,
        groupId: groupId,
        config: config,
        customProps: customProps,
        readonly: readonly,
        setField: setOperator
      }, this.meta);
      if (!renderProps.items) return null;
      return renderOperator(renderProps, config.ctx);
    }
  }]);
}(Component);
Operator.propTypes = {
  id: PropTypes.string,
  groupId: PropTypes.string,
  config: PropTypes.object.isRequired,
  selectedField: PropTypes.any,
  selectedFieldId: PropTypes.string,
  selectedFieldType: PropTypes.string,
  selectedFieldSrc: PropTypes.string,
  selectedOperator: PropTypes.string,
  readonly: PropTypes.bool,
  customProps: PropTypes.object,
  //actions
  setOperator: PropTypes.func.isRequired
};
export { Operator as default };