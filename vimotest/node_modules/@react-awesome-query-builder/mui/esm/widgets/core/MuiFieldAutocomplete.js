import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["items", "selectedKey", "setField", "isValueField", "selectedLabel", "selectedOpts", "selectedAltLabel", "selectedFullLabel"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback } from "react";
import MuiAutocomplete from "../value/MuiAutocomplete";

// see type FieldItemSearchableKeys
var mapFieldItemToOptionKeys = {
  key: "_value2",
  path: "value",
  label: "title",
  altLabel: "_altLabel",
  tooltip: "tooltip",
  grouplabel: "groupTitle"
};
var itemsToListValues = function itemsToListValues(items) {
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return items.map(function (item) {
    var items = item.items,
      path = item.path,
      key = item.key,
      label = item.label,
      altLabel = item.altLabel,
      disabled = item.disabled,
      grouplabel = item.grouplabel,
      group = item.group,
      matchesType = item.matchesType,
      tooltip = item.tooltip;
    var prefix = "\xA0\xA0".repeat(level);
    if (items) {
      return itemsToListValues(items, level + 1);
    } else {
      return {
        title: label,
        renderTitle: matchesType ? /*#__PURE__*/React.createElement("b", null, prefix + label) : prefix + label,
        value: path,
        disabled: disabled,
        groupTitle: level > 0 ? prefix + grouplabel : null,
        group: level > 0 ? _objectSpread(_objectSpread({}, group), {}, {
          label: prefix + group.label
        }) : null,
        tooltip: tooltip,
        _value2: key,
        _altLabel: altLabel
      };
    }
  }).flat(Infinity);
};
var fieldAdapter = function fieldAdapter(_ref, config) {
  var items = _ref.items,
    selectedKey = _ref.selectedKey,
    setField = _ref.setField,
    isValueField = _ref.isValueField,
    selectedLabel = _ref.selectedLabel,
    selectedOpts = _ref.selectedOpts,
    selectedAltLabel = _ref.selectedAltLabel,
    selectedFullLabel = _ref.selectedFullLabel,
    rest = _objectWithoutProperties(_ref, _excluded);
  var tooltipText = selectedAltLabel || selectedFullLabel;
  if (tooltipText == selectedLabel) tooltipText = null;
  var listValues = itemsToListValues(items);
  var value = selectedKey;
  var setValue = function setValue(value, _asyncValues) {
    if (!value && !isValueField) return undefined;
    return setField(value);
  };
  var filterOptionsConfig = {
    stringify: useCallback(function (option) {
      var keysForFilter = config.settings.fieldItemKeysForSearch.map(function (k) {
        return mapFieldItemToOptionKeys[k];
      });
      var valueForFilter = keysForFilter.map(function (k) {
        return typeof option[k] == "string" ? option[k] : "";
      }).join("\0");
      return valueForFilter;
    }, [config])
  };
  return _objectSpread(_objectSpread({}, rest), {}, {
    tooltipText: tooltipText,
    listValues: listValues,
    setValue: setValue,
    filterOptionsConfig: filterOptionsConfig,
    allowCustomValues: false,
    multiple: false,
    disableClearable: !isValueField,
    value: value,
    isFieldAutocomplete: true
  });
};
export default (function (props) {
  return /*#__PURE__*/React.createElement(MuiAutocomplete, fieldAdapter(props, props.config));
});