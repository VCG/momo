import _typeof from "@babel/runtime/helpers/typeof";
import Immutable, { fromJS, Map } from "immutable";
import { getLightTree, _fixImmutableValue, fixPathsInTree } from "../utils/treeUtils";
import { isJsonLogic } from "../utils/stuff";
import uuid from "../utils/uuid";
export { isJsonLogic };
export var getTree = function getTree(immutableTree) {
  var light = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var children1AsArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (!immutableTree) return undefined;
  var tree = immutableTree;
  tree = tree.toJS();
  tree = getLightTree(tree, light, children1AsArray);
  return tree;
};
export var loadTree = function loadTree(serTree) {
  if (isImmutableTree(serTree)) {
    return serTree;
  } else if (isTree(serTree)) {
    return fixPathsInTree(jsToImmutable(serTree));
  } else if (typeof serTree == "string" && serTree.startsWith('["~#iM"')) {
    //tip: old versions of RAQB were saving tree with `transit.toJSON()`
    // https://github.com/ukrbublik/react-awesome-query-builder/issues/69
    throw new Error("You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17");
  } else if (typeof serTree === "string") {
    return fixPathsInTree(jsToImmutable(JSON.parse(serTree)));
  } else throw new Error("Can't load tree!");
};
export var isImmutableTree = function isImmutableTree(tree) {
  return Map.isMap(tree);
};
export var isTree = function isTree(tree) {
  return _typeof(tree) == "object" && (tree.type == "group" || tree.type == "switch_group");
};
export function jsToImmutable(tree) {
  var imm = fromJS(tree, function (key, value, path) {
    var isFuncArg = path && path.length > 3 && path[path.length - 1] === "value" && path[path.length - 3] === "args";
    var isRuleValue = path && path.length > 3 && path[path.length - 1] === "value" && path[path.length - 2] === "properties";
    var outValue;
    if (key == "properties") {
      outValue = value.toOrderedMap();

      // `value` should be undefined instead of null
      // JSON doesn't support undefined and replaces undefined -> null
      // So fix: null -> undefined
      for (var i = 0; i < 2; i++) {
        var _outValue$get, _outValue$get$get, _outValue$get2;
        if (((_outValue$get = outValue.get("value")) === null || _outValue$get === void 0 || (_outValue$get$get = (_outValue$get2 = _outValue$get).get) === null || _outValue$get$get === void 0 ? void 0 : _outValue$get$get.call(_outValue$get2, i)) === null) {
          outValue = outValue.setIn(["value", i], undefined);
        }
      }
    } else if (isFuncArg) {
      outValue = _fixImmutableValue(value);
    } else if ((path ? isRuleValue : key == "value") && Immutable.Iterable.isIndexed(value)) {
      outValue = value.map(_fixImmutableValue).toList();
    } else if (key == "asyncListValues") {
      // keep in JS format
      outValue = value.toJS();
    } else if (key == "children1" && Immutable.Iterable.isIndexed(value)) {
      outValue = new Immutable.OrderedMap(value.map(function (child) {
        return [(child === null || child === void 0 ? void 0 : child.get("id")) || uuid(), child];
      }));
    } else {
      outValue = Immutable.Iterable.isIndexed(value) ? value.toList() : value.toOrderedMap();
    }
    return outValue;
  });
  return imm;
}