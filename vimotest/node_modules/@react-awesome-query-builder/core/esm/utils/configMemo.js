function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import pick from "lodash/pick";
import { extendConfig } from "./configExtend";
import { configKeys } from "./configUtils";
var memoId = 0;
var configId = 0;
var commonMemo;
var memos = {};
export var getCommonMemo = function getCommonMemo() {
  if (!commonMemo) {
    commonMemo = createConfigMemo({
      reactIndex: undefined,
      maxSize: 3,
      canCompile: undefined // default is true
    });
  }
  return commonMemo;
};
export var findExtendedConfigInAllMemos = function findExtendedConfigInAllMemos(config, needsToBeCompiled) {
  var foundExtConfig;
  for (var k in memos) {
    var found = memos[k].findExtendedConfig(config, needsToBeCompiled);
    if (found) {
      foundExtConfig = found;
      break;
    }
  }
  return foundExtConfig;
};
export var createConfigMemo = function createConfigMemo() {
  var meta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    reactIndex: undefined,
    maxSize: 2,
    // current and prev
    canCompile: true
  };
  var configStore = new Map();
  var maxSize = meta.maxSize || 2;
  var currentMemoId = ++memoId;
  var currentMemo;
  var isActive = true;
  var pickConfig = function pickConfig(props) {
    return pick(props, configKeys);
  };
  var extendAndStore = function extendAndStore(config) {
    var extendedConfig = extendConfig(config, ++configId, meta.canCompile);
    storeConfigPair(config, extendedConfig);
    return extendedConfig;
  };
  var getSize = function getSize() {
    return configStore.size;
  };
  var storeConfigPair = function storeConfigPair(config, extendedConfig) {
    if (configStore.size + 1 > maxSize) {
      configStore["delete"](configStore.keys().next().value);
    }
    configStore.set(config, extendedConfig);
  };
  var findBasic = function findBasic(findConfig) {
    var _iterator = _createForOfIteratorHelper(configStore.keys()),
      _step;
    try {
      var _loop = function _loop() {
          var basicConfig = _step.value;
          var extConfig = configStore.get(basicConfig);
          var found = configKeys.map(function (k) {
            return extConfig[k] === findConfig[k];
          }).filter(function (v) {
            return !v;
          }).length === 0;
          if (found) {
            return {
              v: basicConfig
            };
          }
        },
        _ret;
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _ret = _loop();
        if (_ret) return _ret.v;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return findConfig;
  };
  var findExtended = function findExtended(findConfig, needsToBeCompiled) {
    // strict find:
    // return configStore.get(findConfig) || configStore.values().find(ec => ec === findConfig);
    var _iterator2 = _createForOfIteratorHelper(configStore.keys()),
      _step2;
    try {
      var _loop2 = function _loop2() {
          var savedConfig = _step2.value;
          var foundParts = configKeys.filter(function (k) {
            return savedConfig[k] === findConfig[k];
          });
          var found = foundParts.length === configKeys.length && (needsToBeCompiled ? savedConfig.__compliled : true);
          if (found) {
            return {
              v: configStore.get(savedConfig)
            };
          }
        },
        _ret2;
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _ret2 = _loop2();
        if (_ret2) return _ret2.v;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    var _iterator3 = _createForOfIteratorHelper(configStore.values()),
      _step3;
    try {
      var _loop3 = function _loop3() {
          var extendedConfig = _step3.value;
          var foundParts = configKeys.filter(function (k) {
            return extendedConfig[k] === findConfig[k];
          });
          var found = foundParts.length === configKeys.length && (needsToBeCompiled ? extendedConfig.__compliled : true);
          if (found) {
            return {
              v: extendedConfig
            };
          }
        },
        _ret3;
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        _ret3 = _loop3();
        if (_ret3) return _ret3.v;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return null;
  };
  var findOrExtend = function findOrExtend(config) {
    return findExtended(config) || extendAndStore(config);
  };
  var clearConfigMemo = function clearConfigMemo() {
    isActive = false;
    configStore.clear();
    delete memos[currentMemoId];
    if (commonMemo === currentMemo) {
      commonMemo = undefined;
    }
  };
  currentMemo = {
    getExtendedConfig: function getExtendedConfig(props) {
      return findOrExtend(pickConfig(props));
    },
    findExtendedConfig: findExtended,
    getBasicConfig: findBasic,
    clearConfigMemo: clearConfigMemo,
    configId: configId,
    storeConfigPair: storeConfigPair,
    getSize: getSize,
    configStore: configStore,
    memoId: currentMemoId,
    meta: meta
  };
  if (meta.reactIndex === undefined) {
    commonMemo = currentMemo;
  }
  memos[currentMemoId] = currentMemo;
  return currentMemo;
};